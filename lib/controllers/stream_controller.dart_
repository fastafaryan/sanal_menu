import 'package:sanal_menu/models/device.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:sanal_menu/models/item.dart';
import 'package:sanal_menu/models/user.dart';
import 'package:sanal_menu/models/order.dart';
import 'package:sanal_menu/controllers/auth_controller.dart';
import 'package:sanal_menu/controllers/base_controller.dart';
import 'dart:async';
import 'package:device_id/device_id.dart';
import 'package:firebase_auth/firebase_auth.dart';

class StreamController extends BaseController {
  Stream<List<User>> get checkUserRole async* {
    String uid = await AuthController().getCurrentUserId();
    yield* usersCollection
        .where('uid', isEqualTo: uid)
        .snapshots()
        .map(usersFromSnapshot);
  }

  Stream<List<Future<Order>>> getOrderByItemID(String itemID) async* {
    String deviceID = await DeviceId.getID;
    yield* ordersCollection
        .where('deviceID', isEqualTo: deviceID)
        .where('itemID', isEqualTo: itemID)
        .snapshots()
        .map(ordersFromSnapshot);
  }

  // ACCESSING ITEM BY ITS ID. USED TO ACCESS ITEM THROUGH ORDER.
  Future<Item> getItemByID(String itemID) {
    return itemsCollection.document(itemID).get().then((doc) {
      return Item(
        id: doc.documentID ?? '',
        name: doc.data['name'] ?? '',
        image: doc.data['image'],
        price: doc.data['price'] ?? 0,
      );
    });
  }

  // ACCESSING ITEM BY ITS ID. USED TO ACCESS ITEM THROUGH ORDER.
  Future<Device> getDeviceByID(String deviceID) async {
    QuerySnapshot query =
        await devicesCollection.where('id', isEqualTo: deviceID).getDocuments();
    if (query.documents.length == 1) {
      return devicesCollection
          .document(query.documents.first.documentID)
          .get()
          .then((doc) {
        return Device(
          id: doc.documentID ?? '',
          name: doc.data['name'] ?? '',
        );
      });
    } else if (query.documents.length > 1) throw "Duplicate records exist";
    //else throw "Record not found.";
  }
}
